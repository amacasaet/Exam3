/**
 * Simple insertion sort.
 */
 
 template <typename Comparable>
 void insertionSort( vector<Comparable> & a )
 {
 for( int p = 1; p < a.size( ); ++p )
 {
 Comparable tmp = std::move( a[ p ] );

 int j;
 for( j = p; j > 0 && tmp < a[ j - 1 ]; --j )
 a[ j ] = std::move( a[ j - 1 ] );
 a[ j ] = std::move( tmp );
 }
 }
 
---------------------------------------------------

 /**
 * Mergesort algorithm (driver).
 */
 
 template <typename Comparable>
 void mergeSort( vector<Comparable> & a )
 {
 vector<Comparable> tmpArray( a.size( ) );

 mergeSort( a, tmpArray, 0, a.size( ) - 1 );
 }

 /**
 * Internal method that makes recursive calls.
 * a is an array of Comparable items.
 * tmpArray is an array to place the merged result.
 * left is the left-most index of the subarray.
 * right is the right-most index of the subarray.
 */
 template <typename Comparable>
 void mergeSort( vector<Comparable> & a,
 vector<Comparable> & tmpArray, int left, int right )
 {
 if( left < right )
 {
 int center = ( left + right ) / 2;
 mergeSort( a, tmpArray, left, center );
 mergeSort( a, tmpArray, center + 1, right );
 merge( a, tmpArray, left, center + 1, right );
 }
 }
 
 ---------------------------------------------------
 
 template <typename Comparable>
 void SORT( vector<Comparable> & items )
 {
 if( items.size( ) > 1 )
 {
 vector<Comparable> smaller;
 vector<Comparable> same;
 vector<Comparable> larger;

 auto chosenItem = items[ items.size( ) / 2 ];

 for( auto & i : items )
 {
 if( i < chosenItem )
 smaller.push_back( std::move( i ) );
 else if( chosenItem < i )
 larger.push_back( std::move( i ) );
 else
 same.push_back( std::move( i ) );
 }

 SORT( smaller ); // Recursive call!
 SORT( larger ); // Recursive call!

 std::move( begin( smaller ), end( smaller ), begin( items ) );
 std::move( begin( same ), end( same ), begin( items ) + smaller.size( ) );
 std::move( begin( larger ), end( larger ), end( items ) - larger.size( ) );
 }
 }
 
